@*@model GameForum.Models.ViewModels.GameViewModel*@
@model GameForum.Models.Game
@{
    ViewData["Title"] = @Model.Title;
    
}

<head>
    <link rel="stylesheet" href="~/css/game_details.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" />
</head>

<div class="game-details-container">
    <div class="game-header">
        <h1 class="game-title"><i class="fas fa-gamepad"></i> @Model.Title</h1>
    </div>

    <div class="game-content">
        <div class="game-sidebar">
            <div class="game-image-container">
                <img src="@(string.IsNullOrEmpty(Model.ImageUrl) ? "/images/game-placeholder.jpg" : Model.ImageUrl)" alt="@Model.Title" class="game-image" />
            </div>
            <div class="game-rating fw-bold">
                <i class="fas fa-star "></i> @Model.AverageRating.ToString("0.0")
            </div>
            <form method="post" asp-action="AddFavoriteGame" asp-controller="Games" class="favorite-form">
                <input type="hidden" name="gameId" value="@Model.Id" />

                @{
                    bool isFavorited = (bool)(ViewData["IsFavorited"] ?? false);
                }

                <button type="submit" class="favorite-btn">
                    @if (isFavorited)
                    {
                        <text><i class="fas fa-heart-broken"></i> Remove from Favorites</text>
                    }
                    else
                    {
                        <text><i class="fas fa-heart"></i> Add to Favorites</text>
                    }
                </button>
            </form>

            <button type="button" class="favorite-btn favorite-form" onclick="openReviewModal()">
                <i class="fas fa-pen"></i> Review Game
            </button>
            <button type="button" class="favorite-btn favorite-form" onclick="openDiscussionModal()">
                <i class="fas fa-comments"></i> Start Discussion
            </button>

        </div>

        <div class="game-main">
            <div class="game-tabs">
                <ul class="nav-tabs">
                    <li class="tab-item active">
                        <button class="tab-link" id="description-tab" onclick="switchGameTab('description')">Description</button>
                    </li>
                    <li class="tab-item">
                        <button class="tab-link" id="reviews-tab" onclick="switchGameTab('reviews')">Reviews</button>
                    </li>
                    <li class="tab-item">
                        <button class="tab-link" id="discussions-tab" onclick="switchGameTab('discussions')">Discussions</button>
                    </li>
                </ul>

                <div class="tab-content">
                    <div id="description" class="tab-pane active">
                        <div class="game-description">
                            <p>@Model.Description</p>
                        </div>
                    </div>
                    <div id="reviews" class="tab-pane">
                        @if (Model.Reviews != null && Model.Reviews.Any())
                        {
                            foreach (var review in Model.Reviews.OrderByDescending(r => r.CreatedAt))
                            {
                                <div class="review-item">
                                    <div class="review-meta">
                                        <div class="review-author">
                                            <div class="review-author-avatar">
                                                @if (!string.IsNullOrEmpty(review.Author.ProfileImg))
                                                {
                                                    <img src="@review.Author.ProfileImg" alt="Profile Image" class="author-image"/>
                                                }
                                                else
                                                {
                                                    @(review.Author.UserName.Length > 0
                                                        ? review.Author.UserName[0].ToString().ToUpper()
                                                        : "U")
                                                }
                                            </div>
                                            <span class="user-title">
                                                <a asp-controller="User"
                                                asp-action="PublicProfile"
                                                asp-route-userId="@review.Author.Id">
                                                    @review.Author.UserName
                                                </a>
                                            </span>
                                            <span class="review-rating mx-2 fs-6">
                                                <i class="fas fa-star"></i> @review.Rating/10  
                                            </span>
                                        </div>

                                        <div class="review-info">
                                            <span class="review-date">@review.CreatedAt.ToString("MMM dd, yyyy")</span>
                                        </div>
                                    </div>
                                    <div class="review-content">
                                        @review.Content

                                        <div class="vote-controls">
                                            <form>
                                                <button type="button" class="vote-btn upvote" onclick="toggleUpvote(event, 'vote-count-@review.Id', '@review.Id')">
                                                    <i class="fas fa-thumbs-up"></i>
                                                </button>
                                            </form>
                                            <span class="vote-count" id="vote-count-@review.Id" data-state="0">@review.VoteNumber</span>
                                            <form>
                                                <button type="button" class="vote-btn downvote" onclick="toggleDownvote(event, 'vote-count-@review.Id', '@review.Id')">
                                                    <i class="fas fa-thumbs-down"></i>
                                                </button>
                                            </form>
                                            <a asp-controller="Reviews" asp-action="Details" asp-route-id="@review.Id" class="details-btn mx-5">
                                                Open thread
                                            </a>
                                        </div>


                                    </div>
                                </div>
                            }
                        }
                        else
                        {
                            <div class="no-reviews">
                                <i class="fas fa-comment-slash"></i>
                                <p>No reviews yet for this game. Be the first to share your thoughts!</p>
                            </div>
                        }
                    </div>


                    <div id="discussions" class="tab-pane">
                        @if (Model.Discussions != null && Model.Discussions.Any())
                                    {
                            foreach (var discussion in Model.Discussions.OrderByDescending(d => d.CreatedAt))
                            {
                                <div class="review-item">
                                    <div class="review-meta">
                                        <div class="review-author">
                                            <div class="review-author-avatar">
                                                @if (!string.IsNullOrEmpty(discussion.Author.ProfileImg))
                                                {
                                                    <img src="@discussion.Author.ProfileImg" alt="Profile Image" class="author-image" />
                                                }
                                                else
                                                {
                                                    @(discussion.Author.UserName.Length > 0
                                                        ? discussion.Author.UserName[0].ToString().ToUpper()
                                                        : "U")
                                                }
                                            </div>
                                            <span class="user-title">
                                                <a asp-controller="User"
                                                   asp-action="PublicProfile"
                                                   asp-route-userId="@discussion.AuthorId">
                                                    @discussion.Author?.UserName
                                                </a>
                                            </span>
                                        </div>

                                        <div class="review-info">
                                            <span class="review-date">@discussion.CreatedAt.ToString("MMM dd, yyyy")</span>
                                        </div>
                                    </div>
                                    <div class="review-content">
                                        @discussion.Content

                                        <div class="vote-controls">
                                            <form>
                                                <button type="button" class="vote-btn upvote" onclick="toggleUpvote(event, 'vote-count-discussion-@discussion.Id', '@discussion.Id')">
                                                    <i class="fas fa-thumbs-up"></i>
                                                </button>
                                            </form>
                                            <span class="vote-count" id="vote-count-discussion-@discussion.Id" data-state="0">@discussion.VoteNumber</span>
                                            <form>
                                                <button type="button" class="vote-btn downvote" onclick="toggleDownvote(event, 'vote-count-discussion-@discussion.Id', '@discussion.Id')">
                                                    <i class="fas fa-thumbs-down"></i>
                                                </button>
                                            </form>
                                            <a asp-controller="Discussions" asp-action="Details" asp-route-id="@discussion.Id" class="details-btn">
                                                Open thread
                                            </a>
                                        </div>
                                    </div>
                                </div>
                            }
                        }
                        else
                        {
                            <div class="no-reviews">
                                <i class="fas fa-comment-slash"></i>
                                <p>No discussions yet for this game. Start the conversation!</p>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div id="reviewModal" class="modal-overlay">
    <div class="modal-content">
        <h2>Write a Review</h2>
        <form id="reviewForm" method="post" action="/Games/SubmitReview">
            <input type="hidden" name="GameId" value="@Model.Id" />
            <div class="form-group">
                <label for="Content">Your Review</label>
                <textarea name="Content" id="Content" required rows="4" placeholder="Share your thoughts..."></textarea>
            </div>
            <div class="form-group">
                <label for="Rating">Rating (1-10)</label>
                <input type="number" name="Rating" id="Rating" min="1" max="10" required />
            </div>
            <div class="modal-buttons">
                <button type="submit" class="details-btn">Submit</button>
                <button type="button" class="details-btn" onclick="closeReviewModal()">Cancel</button>
            </div>
        </form>
    </div>
</div>

<div id="discussionModal" class="modal-overlay">
    <div class="modal-content">
        <h2>Start a Discussion</h2>
        <form id="discussionForm" method="post" action="/Games/SubmitDiscussion">
            <input type="hidden" name="GameId" value="@Model.Id" />
            <div class="form-group">
                <label for="DiscussionContent">Discussion Content</label>
                <textarea name="Content" id="DiscussionContent" required rows="4" placeholder="What do you want to talk about?"></textarea>
            </div>
            <div class="modal-buttons">
                <button type="submit" class="details-btn">Start</button>
                <button type="button" class="details-btn" onclick="closeDiscussionModal()">Cancel</button>
            </div>
        </form>
    </div>
</div>






@section Scripts {
    <script>
        function switchGameTab(tabId) {
            document.querySelectorAll('.tab-pane').forEach(pane => {
                pane.classList.remove('active');
                pane.style.display = 'none';
            });

            document.getElementById(tabId).classList.add('active');
            document.getElementById(tabId).style.display = 'block';

            document.querySelectorAll('.tab-item').forEach(tab => tab.classList.remove('active'));
            document.querySelector(`#${tabId}-tab`).parentElement.classList.add('active');
        }
        
        // Optional: Initialize tab visibility on load
        document.addEventListener("DOMContentLoaded", () => {
            switchGameTab('description');
        });


            function openReviewModal() {
            document.getElementById("reviewModal").style.display = "flex";
        }

        function closeReviewModal() {
            document.getElementById("reviewModal").style.display = "none";
        }

        window.addEventListener("click", function (event) {
            const modal = document.getElementById("reviewModal");
            if (event.target === modal) {
                closeReviewModal();
            }
        });

                function openDiscussionModal() {
            document.getElementById("discussionModal").style.display = "flex";
        }

        function closeDiscussionModal() {
            document.getElementById("discussionModal").style.display = "none";
        }

        window.addEventListener("click", function (event) {
            const modal = document.getElementById("discussionModal");
            if (event.target === modal) {
                closeDiscussionModal();
            }
        });


                function toggleUpvote(event, elementId, reviewId) {
            event.preventDefault();

            var voteElement = document.getElementById(elementId);
            var currentUpvotes = parseInt(voteElement.innerText);
            var state = voteElement.dataset.state || "0";

            if (state === "0") {
                voteElement.innerText = (currentUpvotes + 1).toString();
                voteElement.dataset.state = "1";
            } else if (state === "1") {
                voteElement.innerText = (currentUpvotes - 1).toString();
                voteElement.dataset.state = "0";
            } else if (state === "-1") {
                voteElement.innerText = (currentUpvotes + 2).toString();
                voteElement.dataset.state = "1";
            }

            fetch('/Post/Vote', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    postId: parseInt(reviewId),
                    voteType: 1 // 1 for upvote
                })
            });
        }

        function toggleDownvote(event, elementId, reviewId) {
            event.preventDefault();

            var voteElement = document.getElementById(elementId);
            var currentUpvotes = parseInt(voteElement.innerText);
            var state = voteElement.dataset.state || "0";

            if (state === "0") {
                voteElement.innerText = (currentUpvotes - 1).toString();
                voteElement.dataset.state = "-1";
            } else if (state === "-1") {
                voteElement.innerText = (currentUpvotes + 1).toString();
                voteElement.dataset.state = "0";
            } else if (state === "1") {
                voteElement.innerText = (currentUpvotes - 2).toString();
                voteElement.dataset.state = "-1";
            }

            fetch('/Post/Vote', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    postId: parseInt(reviewId),
                    voteType: -1 
                })
            });
        }





    </script>
}